#version: '3.7'

networks:
  default_network:

volumes:
  Kafka00_Standalone:
    driver: local
  minio-data:
    driver: local
  hive-data:
    driver: local

services:
  scripts:
    build:
      context: .
    container_name: scripts
    networks:
      - default_network

  Kafka00Service:
    image: bitnami/kafka:3.6.1-debian-11-r0
    restart: always
    container_name: Kafka00Container
    ports:
      - 9094:9094
      - 9092:9092
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # KRaft settings
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # Listeners
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka00Service:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - default_network
    volumes:
      - "Kafka00_Standalone:/bitnami/kafka"
  
  KafkaWebUiService:
    image: provectuslabs/kafka-ui:latest
    restart: always
    container_name: KafkaWebUiContainer
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=Kafka-V35
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
      #- KAFKA_CLUSTERS_0_METRICS_PORT=9999
    networks:
      - default_network

  minio:
    container_name: minio
    image: bitnami/minio:2024.5.28
    environment:
      MINIO_ROOT_USER: accesskey
      MINIO_ROOT_PASSWORD: secretkey
      MINIO_SKIP_CLIENT: "yes"
    healthcheck:
      interval: 1s
      retries: 20
      test:
        - CMD-SHELL
        - mc ready data && mc mb --ignore-existing data/warehouse
    volumes:
      - $PWD/minio/config.json:/.mc/config.json:ro
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - default_network
  
  # nessie:
  #   image: projectnessie/nessie
  #   container_name: nessie
  #   ports:
  #     - "19120:19120"
  #   networks:
  #     - default_network
  
  # dremio:
  #   image: dremio/dremio-oss:latest
  #   container_name: dremio
  #   ports:
  #     - 9047:9047
  #     - 31010:31010
  #     - 32010:32010
  #   networks:
  #     - default_network
  
  # superset:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.superset
  #     args:
  #       - USER=${SUPERSET_USER}
  #       - FIRSTNAME=${SUPERSET_FIRSTNAME}
  #       - LASTNAME=${SUPERSET_LASTNAME}
  #       - EMAIL=${SUPERSET_EMAIL}
  #       - PASSWORD=${SUPERSET_PASSWORD}
  #       - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
  #   container_name: superset
  #   ports:
  #     - 8081:8080
  #     - 8088:8088
  #   env_file:
  #     - .env
  #   # volumes:
  #   #   - ./superset_home:/app/superset_home
  #   networks:
  #     - default_network
  
  trino:
    container_name: trino
    image: trinodb/trino:449
    healthcheck:
      interval: 2s
      retries: 15
      test:
        - CMD-SHELL
        - trino --output-format null --execute 'show schemas in hive; show schemas in memory'
    ports:
      - 8082:8080
    volumes:
      - $PWD/trino/catalog/memory.properties:/etc/trino/catalog/memory.properties:ro
      - $PWD/trino/catalog/hive.properties:/etc/trino/catalog/hive.properties:ro
      - $PWD/trino/jvm.config:/etc/trino/jvm.config:ro
    networks:
      - default_network
    depends_on:
      - hive-metastore
  
  hive-metastore-db:
    image: postgres:16.3-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: metastore
    healthcheck:
      interval: 1s
      retries: 20
      test:
        - CMD
        - pg_isready
        - --port=23456
    command: -c port=23456
    networks:
      - default_network

  hive-metastore:
    # TODO: healthcheck?
    image: starburstdata/hive:3.1.3-e.4
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://hive-metastore-db:23456/metastore
      HIVE_METASTORE_USER: admin
      HIVE_METASTORE_PASSWORD: admin
      HIVE_METASTORE_WAREHOUSE_DIR: s3://warehouse/
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: accesskey
      S3_SECRET_KEY: secretkey
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
    depends_on:
      hive-metastore-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - default_network