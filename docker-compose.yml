#version: '3.7'

networks:
  default_network:

volumes:
  kafka_broker:
    driver: local
  
  minio:
    driver: local

services:
  scripts:
    build:
        context: .
        dockerfile: docker/Dockerfile.scripts
    container_name: scripts
    env_file:
      - .env
    networks:
      - default_network

  kafka_broker:
    image: bitnami/kafka:3.6.1-debian-11-r0
    container_name: kafka_broker
    restart: always
    ports:
      - 9094:9094
      - 9092:9092
    env_file:
      - .env
    user: "1000"
    volumes:
      - kafka_broker:/bitnami/kafka
    networks:
      - default_network
  
  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    restart: always
    ports:
      - '8080:8080'
    env_file:
      - .env
    networks:
      - default_network

  minio:
    image: bitnami/minio:2024.5.28
    container_name: minio
    healthcheck:
      interval: 1s
      retries: 20
      test:
        - CMD-SHELL
        - mc ready data && mc mb --ignore-existing data/warehouse
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - .env
    user: "1000"
    volumes:
      - $PWD/docker/config/minio/config.json:/.mc/config.json:ro
      - minio:/bitnami/minio/data
    networks:
      - default_network
  
  trino:
    image: trinodb/trino:452
    container_name: trino
    healthcheck:
      interval: 2s
      retries: 15
      test:
        - CMD-SHELL
        - trino --output-format null --execute 'show schemas in hive; show schemas in memory'
    ports:
      - 8082:8080
    env_file:
      - .env
    volumes:
      - $PWD/docker/config/trino/catalog/memory.properties:/etc/trino/catalog/memory.properties:ro
      - $PWD/docker/config/trino/catalog/hive.properties:/etc/trino/catalog/hive.properties:ro
      - $PWD/docker/config/trino/jvm.config:/etc/trino/jvm.config:ro
      - $PWD/source/scripts/init.sql:/etc/trino/init.sql
    networks:
      - default_network
    depends_on:
      - metastore
  
  postgres:
    image: postgres:16.3-alpine
    container_name: postgres
    healthcheck:
      interval: 1s
      retries: 20
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER} --port=23456"]
    command: -c port=23456
    ports:
      - 23456:23456
    env_file:
      - .env
    user: "1000"
    volumes:
      - $PWD/docker/volume/postgres:/var/lib/postgresql/data
    networks:
      - default_network

  metastore:
    image: starburstdata/hive:3.1.3-e.10
    container_name: metastore
    ports:
      - 9083:9083
    env_file:
      - .env
    networks:
      - default_network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  superset:
      build:
        context: .
        dockerfile: docker/Dockerfile.superset
        args:
          - USER=${SUPERSET_USER}
          - FIRSTNAME=${SUPERSET_FIRSTNAME}
          - LASTNAME=${SUPERSET_LASTNAME}
          - EMAIL=${SUPERSET_EMAIL}
          - PASSWORD=${SUPERSET_PASSWORD}
          - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      container_name: superset
      ports:
        - 8081:8080
        - 8088:8088
      env_file:
        - .env
      user: "1000"
      networks:
        - default_network
